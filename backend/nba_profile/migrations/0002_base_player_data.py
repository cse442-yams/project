# Generated by Django 2.1.2 on 2018-10-31 21:25
import json
from datetime import datetime

from django.db import migrations

# The apps config that is passed to the callbacks doesn't seem to have
# the path, so import the "current" apps state and get the path from that
from django.apps import apps as current_apps
DATA_DIR = current_apps.get_app_config('nba_profile').path + "/data"


def load_teams(apps, schema_editor):
    NBATeam = apps.get_model('nba_profile', 'NBATeam')
    with open(f'{DATA_DIR}/team_info.json') as f:
        teams = json.load(f)['team_info']

        for t in teams.values():
            team = NBATeam(
                nba_id=t['TEAM_ID'],
                city=t['TEAM_CITY'],
                name=t['TEAM_NAME'],
                abbr=t['TEAM_ABBREVIATION'],
                conference=t['TEAM_CONFERENCE'],
                division=t['TEAM_DIVISION'],
                code=t['TEAM_CODE'],
                min_year=int(t['MIN_YEAR'])
            )
            team.save()


def load_players(apps, schema_editor):
    NBAPlayer = apps.get_model('nba_profile', 'NBAPlayer')
    NBATeam = apps.get_model('nba_profile', 'NBATeam')
    with open(f'{DATA_DIR}/current_players.json') as f:
        players = json.load(f)['players']

        for p in players:
            player = NBAPlayer(
                nba_id=p['personId'],
                first_name=p['firstName'],
                last_name=p['lastName'],
                current_team=NBATeam.objects.get(nba_id=int(p['teamId'])),
                jersey=int(p['jersey']) if p['jersey'] else None,
                is_active=p['isActive'],
                position=p['pos'],
                height=float(p['heightMeters']) if p['heightMeters'] else 0,
                weight=float(p['weightKilograms']) if p['weightKilograms'] else 0,
                birth_date=datetime.strptime(p['dateOfBirthUTC'], '%Y-%m-%d').date() if p['dateOfBirthUTC'] else None,
                nba_debut_year=int(p['nbaDebutYear']) if p['nbaDebutYear'] else None,
                college_name=p['collegeName'] if p['collegeName'] else None,
                last_affiliation=p['lastAffiliation'] if p['lastAffiliation'] else None,
                country=p['country'] if p['country'] else None
            )
            player.save()


class Migration(migrations.Migration):

    dependencies = [
        ('nba_profile', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_teams),
        migrations.RunPython(load_players)
    ]
